# -*- coding: utf-8 -*-
"""p1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mhL-eokG2vv7pobya6DMZ4UFzeTjA9n
"""

from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import scipy.stats
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as ss

from google.colab import drive
drive.mount('/content/gdrive');
! ls '/content/gdrive/MyDrive/Data Mining/'
root = '/content/gdrive/MyDrive/Data Mining/'
rb = pd.read_csv(root+"AB_NYC_2019.csv")
rb.head()

rb.isnull().sum()
rb.duplicated().value_counts()
rb.columns
rb.drop(['id', 'name', 'host_id', 'host_name',
         'last_review'], inplace=True, axis=1)

#corrrelation    = rb.corr(method="spearman");
#print("Spearman rank correlation:");
#print(corrrelation);
scipy.stats.spearmanr(rb['price'], rb['minimum_nights'])

avg_roomtype_cost = rb.groupby('room_type').price.median()
top_price = rb.groupby(['neighbourhood_group', 'room_type']).median(
).sort_values(by='price', ascending=False).reset_index()
g = sns.catplot(x='neighbourhood_group', y='price', data=top_price,
                ci=False, estimator=np.median, kind='point', col='room_type')
for i in range(len(avg_roomtype_cost)):
    g.axes[0][i].axhline(avg_roomtype_cost[i], color='midnightblue')
plt.show()

plt.style.use('fivethirtyeight')
plt.figure(figsize=(13, 7))
plt.title("Neighbourhood Groups")
g = plt.pie(rb.neighbourhood_group.value_counts(
), labels=rb.neighbourhood_group.value_counts().index, autopct='%1.1f%%', startangle=180)
plt.show()
plt.close()

neighbourhood = rb.groupby('neighbourhood_group')[
    'neighbourhood'].count().reset_index()
fig, ax = plt.subplots(figsize=(12, 8))
sns.barplot(x=neighbourhood[neighbourhood.columns[0]],
            y=neighbourhood[neighbourhood.columns[1]], color='teal', ax=ax)
sns.lineplot(x=neighbourhood[neighbourhood.columns[0]],
             y=neighbourhood[neighbourhood.columns[1]], color='r', marker='o', ax=ax)
plt.ylabel('Rent', fontsize='15')
plt.xlabel('Area', fontsize='15')
plt.title('Rental Distribution by Neighbourhood', fontsize='15')
plt.grid('x')
plt.show()
sns.set()

price = rb.loc[:, ['neighbourhood', 'price']].set_index('neighbourhood')
price_stats = rb['price'].describe().reset_index()
price_counts = price.price.value_counts().reset_index()
price_counts.rename(columns={'index': 'price', 'price': 'count'}, inplace=True)
fig2, ax = plt.subplots(figsize=(12, 8))
fig2.patch.set_facecolor('lightgray')
ax.set_facecolor('lightgray')
plt.hist(price_counts['price'], bins=30, color='#004488', edgecolor='salmon')
ax.set_xticks(range(0, 10000, 500))
for tick in ax.get_xticklabels():
    tick.set_rotation(45)
plt.xlabel('price', fontsize='15')
plt.ylabel('Rentals', fontsize='15')
plt.xlim((-0.5, 10000))
plt.title('New York Price-Rental Distribution', fontsize='15')
plt.show()

review = rb.sort_values('number_of_reviews', ascending=False)
top_reviewed = review.loc[:, ['neighbourhood', 'number_of_reviews']][:20]
top_reviewed = top_reviewed.groupby('neighbourhood').mean().sort_values(
    'number_of_reviews', ascending=False).reset_index()
fig4, ax3 = plt.subplots(figsize=(12, 8))
sns.barplot(x=top_reviewed['neighbourhood'],
            y=top_reviewed['number_of_reviews'].values, color='yellowgreen', ax=ax3)
plt.plot(top_reviewed['number_of_reviews'],
         marker='o', color='red', linestyle='--')
plt.ylabel('Reviews', fontsize='15')
plt.xlabel('Location', fontsize='15')
plt.ylim((400, 580))
for ax in ax3.get_xticklabels():
    ax.set_rotation(50)
plt.title('Most-Reviewed Rentals by location', fontsize='15')
plt.show()
sns.set()

rb["price_per_day"] = rb["price"]/rb["minimum_nights"]
rb["Neighbour"] = rb["neighbourhood"].astype(str)+"_"+rb["neighbourhood_group"].astype(str)
sns.barplot(rb["neighbourhood_group"].value_counts().index, rb["neighbourhood_group"].value_counts().values)
plt.title("Number of Listing Per Neighbourhood Group")
plt.show()
for ng in rb["neighbourhood_group"].unique():
  print(f'Avg Price of Neighbourhood Group {ng}: {rb[rb["neighbourhood_group"]==ng]["price_per_day"].sum()/len(rb[rb["neighbourhood_group"]==ng])}')

grp_neighbour = rb.groupby("neighbourhood_group")["price_per_day"].mean().sort_values()
plt.figure(figsize=(10, 10))
plt.xticks(rotation=45)
plt.xlim(0,max(grp_neighbour.values))
sns.barplot(grp_neighbour.values,grp_neighbour.index)
plt.title("Avg price per day of neighbour group")
plt.show()

grp_neighbour = rb.groupby("neighbourhood_group")["price_per_day"].mean().sort_values()
plt.figure(figsize=(10, 10))
plt.xticks(rotation=45)
plt.xlim(0,max(grp_neighbour.values))
sns.barplot(grp_neighbour.values,grp_neighbour.index)
plt.title("Avg price per day of neighbour group")
plt.show()

plt.figure(figsize=(13,7))
plt.title("Type of rooms")
sns.countplot(rb.room_type,palette="muted")
fig=plt.gcf()
plt.show()

plt.figure(figsize=(13,7))
plt.title("Room Type on Neigbourhood Group")
sns.countplot(rb.neighbourhood_group,hue=rb.room_type,palette="muted")
plt.show()

shared_rooms=rb.loc[rb.room_type ==
    'Shared room']['reviews_per_month'].values.tolist()
private_rooms=rb.loc[rb.room_type == 'Private room'].sample(len(
    shared_rooms), replace=False, random_state=1)['reviews_per_month'].values.tolist()

sns.distplot(shared_rooms)
sns.distplot(private_rooms)
plt.xlabel('Reviews per Month')
plt.legend(['Shared Room', 'Private Room'])
plt.show()
def mann_whitney_u_test(d1, d2):
    u_stat, p_val=ss.mannwhitneyu(d1, d2)
    return u_stat, f'{p_val:.20f}'
mann_whitney_u_test(shared_rooms, private_rooms)

